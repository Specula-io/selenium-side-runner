"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeTestsInSuite = normalizeTestsInSuite;
exports.sanitizeProjectName = sanitizeProjectName;

var _url = _interopRequireDefault(require("url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function normalizeTestsInSuite({
  suite,
  tests
}) {
  if (!suite) return;

  let _suite = _objectSpread2({}, suite);

  _suite.tests.forEach((testId, index) => {
    _suite.tests[index] = tests.find(test => test.id === testId).name;
  });

  return _suite;
}

function sanitizeProjectName(projectName) {
  let name = projectName;

  if (name.startsWith('http')) {
    // eslint-disable-next-line node/no-deprecated-api
    return _url.default.parse(projectName).host;
  } else {
    return name.replace(/([^a-z0-9 ._-]+)/gi, '');
  }
}

module.exports = {
  normalizeTestsInSuite,
  sanitizeProjectName
};