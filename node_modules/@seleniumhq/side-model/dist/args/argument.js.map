{"version":3,"sources":["../../src/args/argument.ts"],"names":["Argument","constructor","name","description","identify","validate","extending","is","arg","extensionOf","argument"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEe,MAAMA,QAAN,CAAwD;AAOrEC,EAAAA,WAAW,CAAC;AACVC,IAAAA,IADU;AAEVC,IAAAA,WAFU;AAGVC,IAAAA,QAHU;AAIVC,IAAAA,QAJU;AAKVC,IAAAA;AALU,GAAD,EAYR;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACD,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;AAEDC,EAAAA,EAAE,CAACC,GAAD,EAAiD;AACjD,WAAOA,GAAG,KAAK,IAAf;AACD;;AAEDC,EAAAA,WAAW,CAACC,QAAD,EAAwC;AACjD,WAAO,KAAKJ,SAAL,GACH,KAAKA,SAAL,KAAmBI,QAAnB,IAA+B,KAAKJ,SAAL,CAAeG,WAAf,CAA2BC,QAA3B,CAD5B,GAEH,KAFJ;AAGD;;AAnCoE","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport default class Argument<T, S extends Argument<any, any> = never> {\n  readonly name: string\n  readonly description: string\n  readonly extending?: S\n  readonly identify: validationFunction<T>\n  readonly validate: validationFunction<T>\n\n  constructor({\n    name,\n    description,\n    identify,\n    validate,\n    extending,\n  }: {\n    name: string\n    description: string\n    identify: validationFunction<T>\n    validate: validationFunction<T>\n    extending?: S\n  }) {\n    this.name = name\n    this.description = description\n    this.identify = identify\n    this.validate = validate\n    this.extending = extending\n  }\n\n  is(arg: Argument<any, any>): arg is Argument<T, S> {\n    return arg === this\n  }\n\n  extensionOf(argument: Argument<any, any>): boolean {\n    return this.extending\n      ? this.extending === argument || this.extending.extensionOf(argument)\n      : false\n  }\n}\n\nexport type validationFunction<T> = (value: T) => boolean\n"],"file":"argument.js"}