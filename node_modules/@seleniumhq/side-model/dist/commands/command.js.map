{"version":3,"sources":["../../src/commands/command.ts"],"names":["Command","constructor","name","description","validate","args"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKe,MAAMA,OAAN,CAA0C;AAMvDC,EAAAA,WAAW,CAAC;AACVC,IAAAA,IADU;AAEVC,IAAAA,WAFU;AAGVC,IAAAA,QAHU;AAIVC,IAAAA;AAJU,GAAD,EAUR;AAAA;;AAAA;;AAAA;;AAAA;;AACD,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACD;;AArBsD","sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport ArgType, { ExtractArgument } from '../args/arg-type'\nimport Argument from '../args/argument'\n\nexport default class Command<T extends CommandArguments> {\n  readonly name: string\n  readonly description: string\n  readonly args: T\n  readonly validate: CommandValidationFunction<T>\n\n  constructor({\n    name,\n    description,\n    validate,\n    args,\n  }: {\n    name: string\n    description: string\n    validate: CommandValidationFunction<T>\n    args: T\n  }) {\n    this.name = name\n    this.description = description\n    this.args = args\n    this.validate = validate\n  }\n}\n\ninterface CommandArguments {\n  [key: string]: ArgType<Argument<any, any>[]>\n}\n\ntype ExtractArgType<A> = A extends ArgType<infer B>\n  ? ExtractArgument<B[number]> | undefined\n  : never\ntype ExtractArgumentFromArgType<A extends CommandArguments> = {\n  [K in keyof A]: ExtractArgType<A[K]>\n}\ntype CommandValidationFunction<A extends CommandArguments> = (\n  value: ExtractArgumentFromArgType<A>\n) => boolean\n"],"file":"command.js"}